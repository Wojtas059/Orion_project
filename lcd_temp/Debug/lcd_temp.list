
lcd_temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c0  080031c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031c8  080031c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  08003240  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003240  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086a4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000164f  00000000  00000000  00028744  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000760  00000000  00000000  00029d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  0002a4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000159fb  00000000  00000000  0002abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000071e3  00000000  00000000  000405b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084c3c  00000000  00000000  00047796  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc3d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d0  00000000  00000000  000cc450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003138 	.word	0x08003138

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003138 	.word	0x08003138

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b972 	b.w	80008f4 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9e08      	ldr	r6, [sp, #32]
 800062e:	4604      	mov	r4, r0
 8000630:	4688      	mov	r8, r1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d14b      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000636:	428a      	cmp	r2, r1
 8000638:	4615      	mov	r5, r2
 800063a:	d967      	bls.n	800070c <__udivmoddi4+0xe4>
 800063c:	fab2 f282 	clz	r2, r2
 8000640:	b14a      	cbz	r2, 8000656 <__udivmoddi4+0x2e>
 8000642:	f1c2 0720 	rsb	r7, r2, #32
 8000646:	fa01 f302 	lsl.w	r3, r1, r2
 800064a:	fa20 f707 	lsr.w	r7, r0, r7
 800064e:	4095      	lsls	r5, r2
 8000650:	ea47 0803 	orr.w	r8, r7, r3
 8000654:	4094      	lsls	r4, r2
 8000656:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800065a:	0c23      	lsrs	r3, r4, #16
 800065c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000660:	fa1f fc85 	uxth.w	ip, r5
 8000664:	fb0e 8817 	mls	r8, lr, r7, r8
 8000668:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066c:	fb07 f10c 	mul.w	r1, r7, ip
 8000670:	4299      	cmp	r1, r3
 8000672:	d909      	bls.n	8000688 <__udivmoddi4+0x60>
 8000674:	18eb      	adds	r3, r5, r3
 8000676:	f107 30ff 	add.w	r0, r7, #4294967295
 800067a:	f080 811b 	bcs.w	80008b4 <__udivmoddi4+0x28c>
 800067e:	4299      	cmp	r1, r3
 8000680:	f240 8118 	bls.w	80008b4 <__udivmoddi4+0x28c>
 8000684:	3f02      	subs	r7, #2
 8000686:	442b      	add	r3, r5
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	b2a4      	uxth	r4, r4
 800068c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000690:	fb0e 3310 	mls	r3, lr, r0, r3
 8000694:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000698:	fb00 fc0c 	mul.w	ip, r0, ip
 800069c:	45a4      	cmp	ip, r4
 800069e:	d909      	bls.n	80006b4 <__udivmoddi4+0x8c>
 80006a0:	192c      	adds	r4, r5, r4
 80006a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a6:	f080 8107 	bcs.w	80008b8 <__udivmoddi4+0x290>
 80006aa:	45a4      	cmp	ip, r4
 80006ac:	f240 8104 	bls.w	80008b8 <__udivmoddi4+0x290>
 80006b0:	3802      	subs	r0, #2
 80006b2:	442c      	add	r4, r5
 80006b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b8:	eba4 040c 	sub.w	r4, r4, ip
 80006bc:	2700      	movs	r7, #0
 80006be:	b11e      	cbz	r6, 80006c8 <__udivmoddi4+0xa0>
 80006c0:	40d4      	lsrs	r4, r2
 80006c2:	2300      	movs	r3, #0
 80006c4:	e9c6 4300 	strd	r4, r3, [r6]
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0xbe>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	f000 80eb 	beq.w	80008ae <__udivmoddi4+0x286>
 80006d8:	2700      	movs	r7, #0
 80006da:	e9c6 0100 	strd	r0, r1, [r6]
 80006de:	4638      	mov	r0, r7
 80006e0:	4639      	mov	r1, r7
 80006e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e6:	fab3 f783 	clz	r7, r3
 80006ea:	2f00      	cmp	r7, #0
 80006ec:	d147      	bne.n	800077e <__udivmoddi4+0x156>
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d302      	bcc.n	80006f8 <__udivmoddi4+0xd0>
 80006f2:	4282      	cmp	r2, r0
 80006f4:	f200 80fa 	bhi.w	80008ec <__udivmoddi4+0x2c4>
 80006f8:	1a84      	subs	r4, r0, r2
 80006fa:	eb61 0303 	sbc.w	r3, r1, r3
 80006fe:	2001      	movs	r0, #1
 8000700:	4698      	mov	r8, r3
 8000702:	2e00      	cmp	r6, #0
 8000704:	d0e0      	beq.n	80006c8 <__udivmoddi4+0xa0>
 8000706:	e9c6 4800 	strd	r4, r8, [r6]
 800070a:	e7dd      	b.n	80006c8 <__udivmoddi4+0xa0>
 800070c:	b902      	cbnz	r2, 8000710 <__udivmoddi4+0xe8>
 800070e:	deff      	udf	#255	; 0xff
 8000710:	fab2 f282 	clz	r2, r2
 8000714:	2a00      	cmp	r2, #0
 8000716:	f040 808f 	bne.w	8000838 <__udivmoddi4+0x210>
 800071a:	1b49      	subs	r1, r1, r5
 800071c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000720:	fa1f f885 	uxth.w	r8, r5
 8000724:	2701      	movs	r7, #1
 8000726:	fbb1 fcfe 	udiv	ip, r1, lr
 800072a:	0c23      	lsrs	r3, r4, #16
 800072c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000730:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000734:	fb08 f10c 	mul.w	r1, r8, ip
 8000738:	4299      	cmp	r1, r3
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0x124>
 800073c:	18eb      	adds	r3, r5, r3
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x122>
 8000744:	4299      	cmp	r1, r3
 8000746:	f200 80cd 	bhi.w	80008e4 <__udivmoddi4+0x2bc>
 800074a:	4684      	mov	ip, r0
 800074c:	1a59      	subs	r1, r3, r1
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1410 	mls	r4, lr, r0, r1
 8000758:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x14c>
 8000764:	192c      	adds	r4, r5, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x14a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80b6 	bhi.w	80008de <__udivmoddi4+0x2b6>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e79f      	b.n	80006be <__udivmoddi4+0x96>
 800077e:	f1c7 0c20 	rsb	ip, r7, #32
 8000782:	40bb      	lsls	r3, r7
 8000784:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000788:	ea4e 0e03 	orr.w	lr, lr, r3
 800078c:	fa01 f407 	lsl.w	r4, r1, r7
 8000790:	fa20 f50c 	lsr.w	r5, r0, ip
 8000794:	fa21 f30c 	lsr.w	r3, r1, ip
 8000798:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800079c:	4325      	orrs	r5, r4
 800079e:	fbb3 f9f8 	udiv	r9, r3, r8
 80007a2:	0c2c      	lsrs	r4, r5, #16
 80007a4:	fb08 3319 	mls	r3, r8, r9, r3
 80007a8:	fa1f fa8e 	uxth.w	sl, lr
 80007ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007b0:	fb09 f40a 	mul.w	r4, r9, sl
 80007b4:	429c      	cmp	r4, r3
 80007b6:	fa02 f207 	lsl.w	r2, r2, r7
 80007ba:	fa00 f107 	lsl.w	r1, r0, r7
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b0>
 80007c0:	eb1e 0303 	adds.w	r3, lr, r3
 80007c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c8:	f080 8087 	bcs.w	80008da <__udivmoddi4+0x2b2>
 80007cc:	429c      	cmp	r4, r3
 80007ce:	f240 8084 	bls.w	80008da <__udivmoddi4+0x2b2>
 80007d2:	f1a9 0902 	sub.w	r9, r9, #2
 80007d6:	4473      	add	r3, lr
 80007d8:	1b1b      	subs	r3, r3, r4
 80007da:	b2ad      	uxth	r5, r5
 80007dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e0:	fb08 3310 	mls	r3, r8, r0, r3
 80007e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80007ec:	45a2      	cmp	sl, r4
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1da>
 80007f0:	eb1e 0404 	adds.w	r4, lr, r4
 80007f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f8:	d26b      	bcs.n	80008d2 <__udivmoddi4+0x2aa>
 80007fa:	45a2      	cmp	sl, r4
 80007fc:	d969      	bls.n	80008d2 <__udivmoddi4+0x2aa>
 80007fe:	3802      	subs	r0, #2
 8000800:	4474      	add	r4, lr
 8000802:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000806:	fba0 8902 	umull	r8, r9, r0, r2
 800080a:	eba4 040a 	sub.w	r4, r4, sl
 800080e:	454c      	cmp	r4, r9
 8000810:	46c2      	mov	sl, r8
 8000812:	464b      	mov	r3, r9
 8000814:	d354      	bcc.n	80008c0 <__udivmoddi4+0x298>
 8000816:	d051      	beq.n	80008bc <__udivmoddi4+0x294>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d069      	beq.n	80008f0 <__udivmoddi4+0x2c8>
 800081c:	ebb1 050a 	subs.w	r5, r1, sl
 8000820:	eb64 0403 	sbc.w	r4, r4, r3
 8000824:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000828:	40fd      	lsrs	r5, r7
 800082a:	40fc      	lsrs	r4, r7
 800082c:	ea4c 0505 	orr.w	r5, ip, r5
 8000830:	e9c6 5400 	strd	r5, r4, [r6]
 8000834:	2700      	movs	r7, #0
 8000836:	e747      	b.n	80006c8 <__udivmoddi4+0xa0>
 8000838:	f1c2 0320 	rsb	r3, r2, #32
 800083c:	fa20 f703 	lsr.w	r7, r0, r3
 8000840:	4095      	lsls	r5, r2
 8000842:	fa01 f002 	lsl.w	r0, r1, r2
 8000846:	fa21 f303 	lsr.w	r3, r1, r3
 800084a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800084e:	4338      	orrs	r0, r7
 8000850:	0c01      	lsrs	r1, r0, #16
 8000852:	fbb3 f7fe 	udiv	r7, r3, lr
 8000856:	fa1f f885 	uxth.w	r8, r5
 800085a:	fb0e 3317 	mls	r3, lr, r7, r3
 800085e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000862:	fb07 f308 	mul.w	r3, r7, r8
 8000866:	428b      	cmp	r3, r1
 8000868:	fa04 f402 	lsl.w	r4, r4, r2
 800086c:	d907      	bls.n	800087e <__udivmoddi4+0x256>
 800086e:	1869      	adds	r1, r5, r1
 8000870:	f107 3cff 	add.w	ip, r7, #4294967295
 8000874:	d22f      	bcs.n	80008d6 <__udivmoddi4+0x2ae>
 8000876:	428b      	cmp	r3, r1
 8000878:	d92d      	bls.n	80008d6 <__udivmoddi4+0x2ae>
 800087a:	3f02      	subs	r7, #2
 800087c:	4429      	add	r1, r5
 800087e:	1acb      	subs	r3, r1, r3
 8000880:	b281      	uxth	r1, r0
 8000882:	fbb3 f0fe 	udiv	r0, r3, lr
 8000886:	fb0e 3310 	mls	r3, lr, r0, r3
 800088a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088e:	fb00 f308 	mul.w	r3, r0, r8
 8000892:	428b      	cmp	r3, r1
 8000894:	d907      	bls.n	80008a6 <__udivmoddi4+0x27e>
 8000896:	1869      	adds	r1, r5, r1
 8000898:	f100 3cff 	add.w	ip, r0, #4294967295
 800089c:	d217      	bcs.n	80008ce <__udivmoddi4+0x2a6>
 800089e:	428b      	cmp	r3, r1
 80008a0:	d915      	bls.n	80008ce <__udivmoddi4+0x2a6>
 80008a2:	3802      	subs	r0, #2
 80008a4:	4429      	add	r1, r5
 80008a6:	1ac9      	subs	r1, r1, r3
 80008a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ac:	e73b      	b.n	8000726 <__udivmoddi4+0xfe>
 80008ae:	4637      	mov	r7, r6
 80008b0:	4630      	mov	r0, r6
 80008b2:	e709      	b.n	80006c8 <__udivmoddi4+0xa0>
 80008b4:	4607      	mov	r7, r0
 80008b6:	e6e7      	b.n	8000688 <__udivmoddi4+0x60>
 80008b8:	4618      	mov	r0, r3
 80008ba:	e6fb      	b.n	80006b4 <__udivmoddi4+0x8c>
 80008bc:	4541      	cmp	r1, r8
 80008be:	d2ab      	bcs.n	8000818 <__udivmoddi4+0x1f0>
 80008c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80008c4:	eb69 020e 	sbc.w	r2, r9, lr
 80008c8:	3801      	subs	r0, #1
 80008ca:	4613      	mov	r3, r2
 80008cc:	e7a4      	b.n	8000818 <__udivmoddi4+0x1f0>
 80008ce:	4660      	mov	r0, ip
 80008d0:	e7e9      	b.n	80008a6 <__udivmoddi4+0x27e>
 80008d2:	4618      	mov	r0, r3
 80008d4:	e795      	b.n	8000802 <__udivmoddi4+0x1da>
 80008d6:	4667      	mov	r7, ip
 80008d8:	e7d1      	b.n	800087e <__udivmoddi4+0x256>
 80008da:	4681      	mov	r9, r0
 80008dc:	e77c      	b.n	80007d8 <__udivmoddi4+0x1b0>
 80008de:	3802      	subs	r0, #2
 80008e0:	442c      	add	r4, r5
 80008e2:	e747      	b.n	8000774 <__udivmoddi4+0x14c>
 80008e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e8:	442b      	add	r3, r5
 80008ea:	e72f      	b.n	800074c <__udivmoddi4+0x124>
 80008ec:	4638      	mov	r0, r7
 80008ee:	e708      	b.n	8000702 <__udivmoddi4+0xda>
 80008f0:	4637      	mov	r7, r6
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0xa0>

080008f4 <__aeabi_idiv0>:
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <Reset_Pulse>:

#include "DHT.h"


uint8_t Reset_Pulse(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

	gpio_set_output ();
 80008fc:	f000 f8aa 	bl	8000a54 <gpio_set_output>
	HAL_GPIO_WritePin(PORT, PIN ,0);
 8000900:	2200      	movs	r2, #0
 8000902:	2102      	movs	r1, #2
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <Reset_Pulse+0x48>)
 8000906:	f000 ff37 	bl	8001778 <HAL_GPIO_WritePin>
	HAL_Delay(0.480);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 fc92 	bl	8001234 <HAL_Delay>

	gpio_set_input ();
 8000910:	f000 f88a 	bl	8000a28 <gpio_set_input>
	HAL_Delay(0.080);
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fc8d 	bl	8001234 <HAL_Delay>


	if(!(HAL_GPIO_ReadPin(PORT, PIN))){
 800091a:	2102      	movs	r1, #2
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <Reset_Pulse+0x48>)
 800091e:	f000 ff13 	bl	8001748 <HAL_GPIO_ReadPin>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <Reset_Pulse+0x3a>
		HAL_Delay(0.400);
 8000928:	2000      	movs	r0, #0
 800092a:	f000 fc83 	bl	8001234 <HAL_Delay>
		return 0;
 800092e:	2300      	movs	r3, #0
 8000930:	e003      	b.n	800093a <Reset_Pulse+0x42>
	}
	else
	{
		HAL_Delay(0.400);
 8000932:	2000      	movs	r0, #0
 8000934:	f000 fc7e 	bl	8001234 <HAL_Delay>
		return 1;
 8000938:	2301      	movs	r3, #1
	}



}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020000 	.word	0x40020000

08000944 <send>:



void send(uint8_t data)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	gpio_set_output ();  // set as output
 800094e:	f000 f881 	bl	8000a54 <gpio_set_output>
	for (int i=0; i<8; i++)
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e026      	b.n	80009a6 <send+0x62>
	{
		if ((data & (1<<i))!=0)  // LSB first
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	fa42 f303 	asr.w	r3, r2, r3
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00f      	beq.n	8000988 <send+0x44>
		{
			// write 1 sequence

			gpio_set_output ();  // set as output
 8000968:	f000 f874 	bl	8000a54 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0); // Pull the Pin LOW
 800096c:	2200      	movs	r2, #0
 800096e:	2102      	movs	r1, #2
 8000970:	4810      	ldr	r0, [pc, #64]	; (80009b4 <send+0x70>)
 8000972:	f000 ff01 	bl	8001778 <HAL_GPIO_WritePin>
			HAL_Delay(0.001);  // wait for 1us
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fc5c 	bl	8001234 <HAL_Delay>
			gpio_set_input (); // set the pin as input
 800097c:	f000 f854 	bl	8000a28 <gpio_set_input>
			HAL_Delay(0.060);  // wait for 60us
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fc57 	bl	8001234 <HAL_Delay>
 8000986:	e00b      	b.n	80009a0 <send+0x5c>
		}

		else
		{
			// write 0
			gpio_set_output ();
 8000988:	f000 f864 	bl	8000a54 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2102      	movs	r1, #2
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <send+0x70>)
 8000992:	f000 fef1 	bl	8001778 <HAL_GPIO_WritePin>
			HAL_Delay(0.060);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fc4c 	bl	8001234 <HAL_Delay>
			gpio_set_input ();
 800099c:	f000 f844 	bl	8000a28 <gpio_set_input>
	for (int i=0; i<8; i++)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	ddd5      	ble.n	8000958 <send+0x14>
		}
	}
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40020000 	.word	0x40020000

080009b8 <read>:
uint8_t  read(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
		uint8_t value=0;
 80009be:	2300      	movs	r3, #0
 80009c0:	71fb      	strb	r3, [r7, #7]
		gpio_set_input ();  // set the pin as input
 80009c2:	f000 f831 	bl	8000a28 <gpio_set_input>

		for (int i=0;i<8;i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	e022      	b.n	8000a12 <read+0x5a>
		{
	              // Initiate READ

			gpio_set_output ();  // set as output
 80009cc:	f000 f842 	bl	8000a54 <gpio_set_output>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_1,0);  // pull the pin LOW
 80009d0:	2200      	movs	r2, #0
 80009d2:	2102      	movs	r1, #2
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <read+0x6c>)
 80009d6:	f000 fecf 	bl	8001778 <HAL_GPIO_WritePin>
			HAL_Delay(0.002); // wait for 2 us
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 fc2a 	bl	8001234 <HAL_Delay>

			gpio_set_input ();  // set as input
 80009e0:	f000 f822 	bl	8000a28 <gpio_set_input>
			if (HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_1))  // if the pin is high
 80009e4:	2102      	movs	r1, #2
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <read+0x6c>)
 80009e8:	f000 feae 	bl	8001748 <HAL_GPIO_ReadPin>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d009      	beq.n	8000a06 <read+0x4e>
			{
				value |= 1<<i;  // write 1
 80009f2:	2201      	movs	r2, #1
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	71fb      	strb	r3, [r7, #7]
			}
			HAL_Delay(0.060);  // wait for 60 us
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 fc14 	bl	8001234 <HAL_Delay>
		for (int i=0;i<8;i++)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b07      	cmp	r3, #7
 8000a16:	ddd9      	ble.n	80009cc <read+0x14>

		}
		return value;
 8000a18:	79fb      	ldrb	r3, [r7, #7]

}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40020000 	.word	0x40020000

08000a28 <gpio_set_input>:


}

void gpio_set_input (void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <gpio_set_input+0x24>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <gpio_set_input+0x24>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <gpio_set_input+0x24>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	4903      	ldr	r1, [pc, #12]	; (8000a4c <gpio_set_input+0x24>)
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <gpio_set_input+0x28>)
 8000a42:	f000 fcff 	bl	8001444 <HAL_GPIO_Init>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000098 	.word	0x20000098
 8000a50:	40020000 	.word	0x40020000

08000a54 <gpio_set_output>:


void gpio_set_output (void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <gpio_set_output+0x28>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <gpio_set_output+0x28>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <gpio_set_output+0x28>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <gpio_set_output+0x28>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	4902      	ldr	r1, [pc, #8]	; (8000a7c <gpio_set_output+0x28>)
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <gpio_set_output+0x2c>)
 8000a74:	f000 fce6 	bl	8001444 <HAL_GPIO_Init>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000098 	.word	0x20000098
 8000a80:	40020000 	.word	0x40020000

08000a84 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f023 030f 	bic.w	r3, r3, #15
 8000a94:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	f043 030c 	orr.w	r3, r3, #12
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	f043 030c 	orr.w	r3, r3, #12
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ac4:	f107 0208 	add.w	r2, r7, #8
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2304      	movs	r3, #4
 8000ace:	214e      	movs	r1, #78	; 0x4e
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <lcd_send_cmd+0x5c>)
 8000ad2:	f000 ffa3 	bl	8001a1c <HAL_I2C_Master_Transmit>
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000ac 	.word	0x200000ac

08000ae4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f023 030f 	bic.w	r3, r3, #15
 8000af4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	f043 030d 	orr.w	r3, r3, #13
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	f043 0309 	orr.w	r3, r3, #9
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	f043 030d 	orr.w	r3, r3, #13
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	f043 0309 	orr.w	r3, r3, #9
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b24:	f107 0208 	add.w	r2, r7, #8
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	214e      	movs	r1, #78	; 0x4e
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <lcd_send_data+0x5c>)
 8000b32:	f000 ff73 	bl	8001a1c <HAL_I2C_Master_Transmit>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000ac 	.word	0x200000ac

08000b44 <lcd_clear>:

void lcd_clear (void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000b4a:	2080      	movs	r0, #128	; 0x80
 8000b4c:	f7ff ff9a 	bl	8000a84 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	e005      	b.n	8000b62 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000b56:	2020      	movs	r0, #32
 8000b58:	f7ff ffc4 	bl	8000ae4 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b45      	cmp	r3, #69	; 0x45
 8000b66:	ddf6      	ble.n	8000b56 <lcd_clear+0x12>
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    switch (row)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <lcd_put_cur+0x16>
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d005      	beq.n	8000b90 <lcd_put_cur+0x20>
 8000b84:	e009      	b.n	8000b9a <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	603b      	str	r3, [r7, #0]
            break;
 8000b8e:	e004      	b.n	8000b9a <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b96:	603b      	str	r3, [r7, #0]
            break;
 8000b98:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff70 	bl	8000a84 <lcd_send_cmd>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <lcd_init>:


void lcd_init (void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000bb0:	2032      	movs	r0, #50	; 0x32
 8000bb2:	f000 fb3f 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bb6:	2030      	movs	r0, #48	; 0x30
 8000bb8:	f7ff ff64 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000bbc:	2005      	movs	r0, #5
 8000bbe:	f000 fb39 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bc2:	2030      	movs	r0, #48	; 0x30
 8000bc4:	f7ff ff5e 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 fb33 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bce:	2030      	movs	r0, #48	; 0x30
 8000bd0:	f7ff ff58 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f000 fb2d 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000bda:	2020      	movs	r0, #32
 8000bdc:	f7ff ff52 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f000 fb27 	bl	8001234 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff ff4c 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 fb21 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bf2:	2008      	movs	r0, #8
 8000bf4:	f7ff ff46 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fb1b 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff ff40 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fb15 	bl	8001234 <HAL_Delay>
	HAL_Delay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 fb12 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c10:	2006      	movs	r0, #6
 8000c12:	f7ff ff37 	bl	8000a84 <lcd_send_cmd>
	HAL_Delay(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fb0c 	bl	8001234 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f7ff ff31 	bl	8000a84 <lcd_send_cmd>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c2e:	e006      	b.n	8000c3e <lcd_send_string+0x18>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff53 	bl	8000ae4 <lcd_send_data>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f4      	bne.n	8000c30 <lcd_send_string+0xa>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t spr =2, temp1, temp2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5a:	f000 fa79 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5e:	f000 f86d 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c62:	f000 f903 	bl	8000e6c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c66:	f000 f8d3 	bl	8000e10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000c6a:	f7ff ff9f 	bl	8000bac <lcd_init>



  lcd_send_string("Hello world!");
 8000c6e:	482f      	ldr	r0, [pc, #188]	; (8000d2c <main+0xdc>)
 8000c70:	f7ff ffd9 	bl	8000c26 <lcd_send_string>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 ,0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	482d      	ldr	r0, [pc, #180]	; (8000d30 <main+0xe0>)
 8000c7a:	f000 fd7d 	bl	8001778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 ,1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2102      	movs	r1, #2
 8000c82:	482b      	ldr	r0, [pc, #172]	; (8000d30 <main+0xe0>)
 8000c84:	f000 fd78 	bl	8001778 <HAL_GPIO_WritePin>
  lcd_put_cur(0,0);
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff ff70 	bl	8000b70 <lcd_put_cur>
  lcd_send_string("Temp: ");
 8000c90:	4828      	ldr	r0, [pc, #160]	; (8000d34 <main+0xe4>)
 8000c92:	f7ff ffc8 	bl	8000c26 <lcd_send_string>
  lcd_put_cur(1,0);
 8000c96:	2100      	movs	r1, #0
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff69 	bl	8000b70 <lcd_put_cur>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  spr = Reset_Pulse();
 8000c9e:	f7ff fe2b 	bl	80008f8 <Reset_Pulse>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	75fb      	strb	r3, [r7, #23]

	 	  		  send(0xCC);
 8000ca6:	20cc      	movs	r0, #204	; 0xcc
 8000ca8:	f7ff fe4c 	bl	8000944 <send>
	 	  		  send(0x44);
 8000cac:	2044      	movs	r0, #68	; 0x44
 8000cae:	f7ff fe49 	bl	8000944 <send>
	 	  		  HAL_Delay(800);
 8000cb2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000cb6:	f000 fabd 	bl	8001234 <HAL_Delay>

	 	  		  Reset_Pulse();
 8000cba:	f7ff fe1d 	bl	80008f8 <Reset_Pulse>

	 	  		  send(0xCC);
 8000cbe:	20cc      	movs	r0, #204	; 0xcc
 8000cc0:	f7ff fe40 	bl	8000944 <send>
	 	  		  send(0xBE);
 8000cc4:	20be      	movs	r0, #190	; 0xbe
 8000cc6:	f7ff fe3d 	bl	8000944 <send>

	 	  		  temp1 = read();
 8000cca:	f7ff fe75 	bl	80009b8 <read>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	75bb      	strb	r3, [r7, #22]
	 	  		  temp2 = read();
 8000cd2:	f7ff fe71 	bl	80009b8 <read>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	757b      	strb	r3, [r7, #21]

	 	  		  temp = (temp2<<8)|temp1;
 8000cda:	7d7b      	ldrb	r3, [r7, #21]
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	b21a      	sxth	r2, r3
 8000ce0:	7dbb      	ldrb	r3, [r7, #22]
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	827b      	strh	r3, [r7, #18]
	 	  		  temperature = (float)temp/16;
 8000cea:	8a7b      	ldrh	r3, [r7, #18]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cf4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cfc:	edc7 7a03 	vstr	s15, [r7, #12]

	 	  		  char num_char[MAX_DIGITS + sizeof(char)];
	 	  		  //dtostrf( temperature, 3, 4, temp );
	 	  		  lcd_clear();
 8000d00:	f7ff ff20 	bl	8000b44 <lcd_clear>

	 	  		  //char dupa[5];
	 	  		  lcd_put_cur(1,0);
 8000d04:	2100      	movs	r1, #0
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff ff32 	bl	8000b70 <lcd_put_cur>
	 	  		  sprintf(num_char, "Temp: %d", temperature);
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f7ff fc1b 	bl	8000548 <__aeabi_f2d>
 8000d12:	4603      	mov	r3, r0
 8000d14:	460c      	mov	r4, r1
 8000d16:	4638      	mov	r0, r7
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4623      	mov	r3, r4
 8000d1c:	4906      	ldr	r1, [pc, #24]	; (8000d38 <main+0xe8>)
 8000d1e:	f001 fe05 	bl	800292c <siprintf>
	 	  		  lcd_send_string(num_char);
 8000d22:	463b      	mov	r3, r7
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff7e 	bl	8000c26 <lcd_send_string>
  {
 8000d2a:	e7b8      	b.n	8000c9e <main+0x4e>
 8000d2c:	08003150 	.word	0x08003150
 8000d30:	40020000 	.word	0x40020000
 8000d34:	08003160 	.word	0x08003160
 8000d38:	08003168 	.word	0x08003168

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	; 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fde6 	bl	800291c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d88:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000db4:	2332      	movs	r3, #50	; 0x32
 8000db6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 f931 	bl	800202c <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dd0:	f000 f8aa 	bl	8000f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2101      	movs	r1, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fb8b 	bl	800250c <HAL_RCC_ClockConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dfc:	f000 f894 	bl	8000f28 <Error_Handler>
  }
}
 8000e00:	bf00      	nop
 8000e02:	3750      	adds	r7, #80	; 0x50
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40007000 	.word	0x40007000

08000e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <MX_I2C1_Init+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_I2C1_Init+0x58>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e4e:	f000 fcad 	bl	80017ac <HAL_I2C_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e58:	f000 f866 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200000ac 	.word	0x200000ac
 8000e64:	40005400 	.word	0x40005400
 8000e68:	000186a0 	.word	0x000186a0

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_GPIO_Init+0xb4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2182      	movs	r1, #130	; 0x82
 8000eda:	4812      	ldr	r0, [pc, #72]	; (8000f24 <MX_GPIO_Init+0xb8>)
 8000edc:	f000 fc4c 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0xb8>)
 8000ef8:	f000 faa4 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_GPIO_Init+0xb8>)
 8000f14:	f000 fa96 	bl	8001444 <HAL_GPIO_Init>

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <Error_Handler+0x6>

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_I2C_MspInit+0x84>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12b      	bne.n	8000ffa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <HAL_I2C_MspInit+0x8c>)
 8000fda:	f000 fa33 	bl	8001444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_I2C_MspInit+0x88>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40005400 	.word	0x40005400
 8001008:	40023800 	.word	0x40023800
 800100c:	40020400 	.word	0x40020400

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f8ca 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f001 fc18 	bl	80028c8 <__errno>
 8001098:	4602      	mov	r2, r0
 800109a:	230c      	movs	r3, #12
 800109c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20018000 	.word	0x20018000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	20000108 	.word	0x20000108

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <SystemInit+0x28>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <SystemInit+0x28>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SystemInit+0x28>)
 80010e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ea:	609a      	str	r2, [r3, #8]
#endif
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001100:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001102:	e003      	b.n	800110c <LoopCopyDataInit>

08001104 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001106:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001108:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800110a:	3104      	adds	r1, #4

0800110c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001110:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001114:	d3f6      	bcc.n	8001104 <CopyDataInit>
  ldr  r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001118:	e002      	b.n	8001120 <LoopFillZerobss>

0800111a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800111a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800111c:	f842 3b04 	str.w	r3, [r2], #4

08001120 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001124:	d3f9      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001126:	f7ff ffd3 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f001 fbd3 	bl	80028d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fd8f 	bl	8000c50 <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001134:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001138:	080031d0 	.word	0x080031d0
  ldr  r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001140:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001144:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001148:	20000108 	.word	0x20000108

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_Init+0x40>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_Init+0x40>)
 8001166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x40>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f92f 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fed4 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f939 	bl	800142a <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f90f 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	20000100 	.word	0x20000100

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000100 	.word	0x20000100

08001234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800123c:	f7ff ffee 	bl	800121c <HAL_GetTick>
 8001240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800124c:	d005      	beq.n	800125a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_Delay+0x40>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125a:	bf00      	nop
 800125c:	f7ff ffde 	bl	800121c <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	429a      	cmp	r2, r3
 800126a:	d8f7      	bhi.n	800125c <HAL_Delay+0x28>
  {
  }
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	; (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff47 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff5c 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffb0 	bl	8001398 <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e159      	b.n	8001714 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8148 	bne.w	800170e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d00b      	beq.n	800149e <HAL_GPIO_Init+0x5a>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001492:	2b11      	cmp	r3, #17
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b12      	cmp	r3, #18
 800149c:	d130      	bne.n	8001500 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	091b      	lsrs	r3, r3, #4
 80014ea:	f003 0201 	and.w	r2, r3, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0xfc>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b12      	cmp	r3, #18
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a2 	beq.w	800170e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b56      	ldr	r3, [pc, #344]	; (8001728 <HAL_GPIO_Init+0x2e4>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a55      	ldr	r2, [pc, #340]	; (8001728 <HAL_GPIO_Init+0x2e4>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_GPIO_Init+0x2e4>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e6:	4a51      	ldr	r2, [pc, #324]	; (800172c <HAL_GPIO_Init+0x2e8>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2ec>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x202>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a47      	ldr	r2, [pc, #284]	; (8001734 <HAL_GPIO_Init+0x2f0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x1fe>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a46      	ldr	r2, [pc, #280]	; (8001738 <HAL_GPIO_Init+0x2f4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x1fa>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a45      	ldr	r2, [pc, #276]	; (800173c <HAL_GPIO_Init+0x2f8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x1f6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a44      	ldr	r2, [pc, #272]	; (8001740 <HAL_GPIO_Init+0x2fc>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x1f2>
 8001632:	2304      	movs	r3, #4
 8001634:	e008      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001636:	2307      	movs	r3, #7
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163a:	2303      	movs	r3, #3
 800163c:	e004      	b.n	8001648 <HAL_GPIO_Init+0x204>
 800163e:	2302      	movs	r3, #2
 8001640:	e002      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_GPIO_Init+0x204>
 8001646:	2300      	movs	r3, #0
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	f002 0203 	and.w	r2, r2, #3
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	4093      	lsls	r3, r2
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001658:	4934      	ldr	r1, [pc, #208]	; (800172c <HAL_GPIO_Init+0x2e8>)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_GPIO_Init+0x300>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_GPIO_Init+0x300>)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_GPIO_Init+0x300>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b4:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_GPIO_Init+0x300>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_GPIO_Init+0x300>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_GPIO_Init+0x300>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_GPIO_Init+0x300>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_GPIO_Init+0x300>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	f67f aea2 	bls.w	8001460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800171c:	bf00      	nop
 800171e:	3724      	adds	r7, #36	; 0x24
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40013c00 	.word	0x40013c00

08001748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e11f      	b.n	80019fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fbd4 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2224      	movs	r2, #36	; 0x24
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800180e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001810:	f001 f846 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8001814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a7b      	ldr	r2, [pc, #492]	; (8001a08 <HAL_I2C_Init+0x25c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d807      	bhi.n	8001830 <HAL_I2C_Init+0x84>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_I2C_Init+0x260>)
 8001824:	4293      	cmp	r3, r2
 8001826:	bf94      	ite	ls
 8001828:	2301      	movls	r3, #1
 800182a:	2300      	movhi	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	e006      	b.n	800183e <HAL_I2C_Init+0x92>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a77      	ldr	r2, [pc, #476]	; (8001a10 <HAL_I2C_Init+0x264>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0db      	b.n	80019fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4a72      	ldr	r2, [pc, #456]	; (8001a14 <HAL_I2C_Init+0x268>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0c9b      	lsrs	r3, r3, #18
 8001850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	430a      	orrs	r2, r1
 8001864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a64      	ldr	r2, [pc, #400]	; (8001a08 <HAL_I2C_Init+0x25c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d802      	bhi.n	8001880 <HAL_I2C_Init+0xd4>
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3301      	adds	r3, #1
 800187e:	e009      	b.n	8001894 <HAL_I2C_Init+0xe8>
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a63      	ldr	r2, [pc, #396]	; (8001a18 <HAL_I2C_Init+0x26c>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	430b      	orrs	r3, r1
 800189a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4956      	ldr	r1, [pc, #344]	; (8001a08 <HAL_I2C_Init+0x25c>)
 80018b0:	428b      	cmp	r3, r1
 80018b2:	d80d      	bhi.n	80018d0 <HAL_I2C_Init+0x124>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e59      	subs	r1, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fbb1 f3f3 	udiv	r3, r1, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	bf38      	it	cc
 80018cc:	2304      	movcc	r3, #4
 80018ce:	e04f      	b.n	8001970 <HAL_I2C_Init+0x1c4>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d111      	bne.n	80018fc <HAL_I2C_Init+0x150>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e58      	subs	r0, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e012      	b.n	8001922 <HAL_I2C_Init+0x176>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	0099      	lsls	r1, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Init+0x17e>
 8001926:	2301      	movs	r3, #1
 8001928:	e022      	b.n	8001970 <HAL_I2C_Init+0x1c4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10e      	bne.n	8001950 <HAL_I2C_Init+0x1a4>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e58      	subs	r0, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	440b      	add	r3, r1
 8001940:	fbb0 f3f3 	udiv	r3, r0, r3
 8001944:	3301      	adds	r3, #1
 8001946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194e:	e00f      	b.n	8001970 <HAL_I2C_Init+0x1c4>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	0099      	lsls	r1, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	fbb0 f3f3 	udiv	r3, r0, r3
 8001966:	3301      	adds	r3, #1
 8001968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	6809      	ldr	r1, [r1, #0]
 8001974:	4313      	orrs	r3, r2
 8001976:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69da      	ldr	r2, [r3, #28]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800199e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6911      	ldr	r1, [r2, #16]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	4311      	orrs	r1, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0201 	orr.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	000186a0 	.word	0x000186a0
 8001a0c:	001e847f 	.word	0x001e847f
 8001a10:	003d08ff 	.word	0x003d08ff
 8001a14:	431bde83 	.word	0x431bde83
 8001a18:	10624dd3 	.word	0x10624dd3

08001a1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	461a      	mov	r2, r3
 8001a28:	460b      	mov	r3, r1
 8001a2a:	817b      	strh	r3, [r7, #10]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff fbf4 	bl	800121c <HAL_GetTick>
 8001a34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	f040 80e0 	bne.w	8001c04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2319      	movs	r3, #25
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4970      	ldr	r1, [pc, #448]	; (8001c10 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 f964 	bl	8001d1c <I2C_WaitOnFlagUntilTimeout>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0d3      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_I2C_Master_Transmit+0x50>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e0cc      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d007      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2221      	movs	r2, #33	; 0x21
 8001aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2210      	movs	r2, #16
 8001aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	893a      	ldrh	r2, [r7, #8]
 8001ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	; (8001c14 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ad4:	8979      	ldrh	r1, [r7, #10]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f89c 	bl	8001c18 <I2C_MasterRequestWrite>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e08d      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b00:	e066      	b.n	8001bd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	6a39      	ldr	r1, [r7, #32]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f9de 	bl	8001ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00d      	beq.n	8001b2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d107      	bne.n	8001b2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06b      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d11b      	bne.n	8001ba4 <HAL_I2C_Master_Transmit+0x188>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d017      	beq.n	8001ba4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	6a39      	ldr	r1, [r7, #32]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f9ce 	bl	8001f4a <I2C_WaitOnBTFFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d107      	bne.n	8001bcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e01a      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d194      	bne.n	8001b02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	00100002 	.word	0x00100002
 8001c14:	ffff0000 	.word	0xffff0000

08001c18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	460b      	mov	r3, r1
 8001c26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d006      	beq.n	8001c42 <I2C_MasterRequestWrite+0x2a>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d003      	beq.n	8001c42 <I2C_MasterRequestWrite+0x2a>
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c40:	d108      	bne.n	8001c54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e00b      	b.n	8001c6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	2b12      	cmp	r3, #18
 8001c5a:	d107      	bne.n	8001c6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f84f 	bl	8001d1c <I2C_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00d      	beq.n	8001ca0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c92:	d103      	bne.n	8001c9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e035      	b.n	8001d0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca8:	d108      	bne.n	8001cbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001caa:	897b      	ldrh	r3, [r7, #10]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cb8:	611a      	str	r2, [r3, #16]
 8001cba:	e01b      	b.n	8001cf4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cbc:	897b      	ldrh	r3, [r7, #10]
 8001cbe:	11db      	asrs	r3, r3, #7
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f003 0306 	and.w	r3, r3, #6
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f063 030f 	orn	r3, r3, #15
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <I2C_MasterRequestWrite+0xfc>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f875 	bl	8001dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e010      	b.n	8001d0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <I2C_MasterRequestWrite+0x100>)
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f865 	bl	8001dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	00010008 	.word	0x00010008
 8001d18:	00010002 	.word	0x00010002

08001d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d2c:	e025      	b.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d34:	d021      	beq.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d36:	f7ff fa71 	bl	800121c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d302      	bcc.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d116      	bne.n	8001d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f043 0220 	orr.w	r2, r3, #32
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e023      	b.n	8001dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d10d      	bne.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf0c      	ite	eq
 8001d96:	2301      	moveq	r3, #1
 8001d98:	2300      	movne	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	e00c      	b.n	8001dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4013      	ands	r3, r2
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d0b6      	beq.n	8001d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dd8:	e051      	b.n	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de8:	d123      	bne.n	8001e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f043 0204 	orr.w	r2, r3, #4
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e046      	b.n	8001ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d021      	beq.n	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3a:	f7ff f9ef 	bl	800121c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d302      	bcc.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d116      	bne.n	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f043 0220 	orr.w	r2, r3, #32
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e020      	b.n	8001ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10c      	bne.n	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4013      	ands	r3, r2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	e00b      	b.n	8001eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d18d      	bne.n	8001dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ed4:	e02d      	b.n	8001f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f878 	bl	8001fcc <I2C_IsAcknowledgeFailed>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e02d      	b.n	8001f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d021      	beq.n	8001f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eee:	f7ff f995 	bl	800121c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d302      	bcc.n	8001f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d116      	bne.n	8001f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f043 0220 	orr.w	r2, r3, #32
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e007      	b.n	8001f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d1ca      	bne.n	8001ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f56:	e02d      	b.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f837 	bl	8001fcc <I2C_IsAcknowledgeFailed>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e02d      	b.n	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6e:	d021      	beq.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f70:	f7ff f954 	bl	800121c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d302      	bcc.n	8001f86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e007      	b.n	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d1ca      	bne.n	8001f58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe2:	d11b      	bne.n	800201c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e25b      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d075      	beq.n	8002136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204a:	4ba3      	ldr	r3, [pc, #652]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b04      	cmp	r3, #4
 8002054:	d00c      	beq.n	8002070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4ba0      	ldr	r3, [pc, #640]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205e:	2b08      	cmp	r3, #8
 8002060:	d112      	bne.n	8002088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b9d      	ldr	r3, [pc, #628]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206e:	d10b      	bne.n	8002088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	4b99      	ldr	r3, [pc, #612]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d05b      	beq.n	8002134 <HAL_RCC_OscConfig+0x108>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d157      	bne.n	8002134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e236      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_OscConfig+0x74>
 8002092:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a90      	ldr	r2, [pc, #576]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xb0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x98>
 80020aa:	4b8b      	ldr	r3, [pc, #556]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a8a      	ldr	r2, [pc, #552]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a87      	ldr	r2, [pc, #540]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xb0>
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a83      	ldr	r2, [pc, #524]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b81      	ldr	r3, [pc, #516]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a80      	ldr	r2, [pc, #512]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff f89a 	bl	800121c <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff f896 	bl	800121c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1fb      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xc0>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff f886 	bl	800121c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff f882 	bl	800121c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1e7      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0xe8>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002142:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b5c      	ldr	r3, [pc, #368]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x152>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1bb      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4952      	ldr	r1, [pc, #328]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <HAL_RCC_OscConfig+0x2b0>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7ff f83b 	bl	800121c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff f837 	bl	800121c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e19c      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4940      	ldr	r1, [pc, #256]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCC_OscConfig+0x2b0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff f81a 	bl	800121c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff f816 	bl	800121c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e17b      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d030      	beq.n	8002278 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d016      	beq.n	800224c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_OscConfig+0x2b4>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe fffa 	bl	800121c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe fff6 	bl	800121c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e15b      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 8002240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x200>
 800224a:	e015      	b.n	8002278 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_OscConfig+0x2b4>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe ffe3 	bl	800121c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225a:	f7fe ffdf 	bl	800121c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e144      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 800226e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a0 	beq.w	80023c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_OscConfig+0x2b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d121      	bne.n	8002306 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_RCC_OscConfig+0x2b8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_RCC_OscConfig+0x2b8>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7fe ffa5 	bl	800121c <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	e011      	b.n	80022fa <HAL_RCC_OscConfig+0x2ce>
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	42470000 	.word	0x42470000
 80022e0:	42470e80 	.word	0x42470e80
 80022e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e8:	f7fe ff98 	bl	800121c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0fd      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fa:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x4d4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <HAL_RCC_OscConfig+0x2f0>
 800230e:	4b7d      	ldr	r3, [pc, #500]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a7c      	ldr	r2, [pc, #496]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
 800231a:	e01c      	b.n	8002356 <HAL_RCC_OscConfig+0x32a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x312>
 8002324:	4b77      	ldr	r3, [pc, #476]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a76      	ldr	r2, [pc, #472]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	4b74      	ldr	r3, [pc, #464]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4a73      	ldr	r2, [pc, #460]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6713      	str	r3, [r2, #112]	; 0x70
 800233c:	e00b      	b.n	8002356 <HAL_RCC_OscConfig+0x32a>
 800233e:	4b71      	ldr	r3, [pc, #452]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a70      	ldr	r2, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
 800234a:	4b6e      	ldr	r3, [pc, #440]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a6d      	ldr	r2, [pc, #436]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d015      	beq.n	800238a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235e:	f7fe ff5d 	bl	800121c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	e00a      	b.n	800237c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe ff59 	bl	800121c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0bc      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	4b61      	ldr	r3, [pc, #388]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ee      	beq.n	8002366 <HAL_RCC_OscConfig+0x33a>
 8002388:	e014      	b.n	80023b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7fe ff47 	bl	800121c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe ff43 	bl	800121c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0a6      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	4b56      	ldr	r3, [pc, #344]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b52      	ldr	r3, [pc, #328]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8092 	beq.w	80024f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d05c      	beq.n	8002496 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d141      	bne.n	8002468 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e4:	4b48      	ldr	r3, [pc, #288]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe ff17 	bl	800121c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe ff13 	bl	800121c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e078      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f0      	bne.n	80023f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69da      	ldr	r2, [r3, #28]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	019b      	lsls	r3, r3, #6
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	041b      	lsls	r3, r3, #16
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	061b      	lsls	r3, r3, #24
 8002434:	4933      	ldr	r1, [pc, #204]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe feec 	bl	800121c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fee8 	bl	800121c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e04d      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x41c>
 8002466:	e045      	b.n	80024f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	4b27      	ldr	r3, [pc, #156]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fed5 	bl	800121c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fed1 	bl	800121c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e036      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x44a>
 8002494:	e02e      	b.n	80024f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e029      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_RCC_OscConfig+0x4d8>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d11c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d115      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10d      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024de:	429a      	cmp	r2, r3
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40007000 	.word	0x40007000
 8002504:	40023800 	.word	0x40023800
 8002508:	42470060 	.word	0x42470060

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cc      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d90c      	bls.n	8002548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d044      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e067      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4934      	ldr	r1, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fe0e 	bl	800121c <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fe0a 	bl	800121c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e04f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d20c      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4601      	mov	r1, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	fa21 f303 	lsr.w	r3, r1, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fd6e 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08003174 	.word	0x08003174
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d007      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x32>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d008      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x38>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 80b4 	bne.w	800286c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002706:	60bb      	str	r3, [r7, #8]
       break;
 8002708:	e0b3      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270a:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800270c:	60bb      	str	r3, [r7, #8]
      break;
 800270e:	e0b0      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002710:	4b5a      	ldr	r3, [pc, #360]	; (800287c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002718:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271a:	4b58      	ldr	r3, [pc, #352]	; (800287c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d04a      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002726:	4b55      	ldr	r3, [pc, #340]	; (800287c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	f04f 0400 	mov.w	r4, #0
 8002730:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	ea03 0501 	and.w	r5, r3, r1
 800273c:	ea04 0602 	and.w	r6, r4, r2
 8002740:	4629      	mov	r1, r5
 8002742:	4632      	mov	r2, r6
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	f04f 0400 	mov.w	r4, #0
 800274c:	0154      	lsls	r4, r2, #5
 800274e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002752:	014b      	lsls	r3, r1, #5
 8002754:	4619      	mov	r1, r3
 8002756:	4622      	mov	r2, r4
 8002758:	1b49      	subs	r1, r1, r5
 800275a:	eb62 0206 	sbc.w	r2, r2, r6
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	f04f 0400 	mov.w	r4, #0
 8002766:	0194      	lsls	r4, r2, #6
 8002768:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800276c:	018b      	lsls	r3, r1, #6
 800276e:	1a5b      	subs	r3, r3, r1
 8002770:	eb64 0402 	sbc.w	r4, r4, r2
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	00e2      	lsls	r2, r4, #3
 800277e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002782:	00d9      	lsls	r1, r3, #3
 8002784:	460b      	mov	r3, r1
 8002786:	4614      	mov	r4, r2
 8002788:	195b      	adds	r3, r3, r5
 800278a:	eb44 0406 	adc.w	r4, r4, r6
 800278e:	f04f 0100 	mov.w	r1, #0
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	0262      	lsls	r2, r4, #9
 8002798:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800279c:	0259      	lsls	r1, r3, #9
 800279e:	460b      	mov	r3, r1
 80027a0:	4614      	mov	r4, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	4621      	mov	r1, r4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f04f 0400 	mov.w	r4, #0
 80027ac:	461a      	mov	r2, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	f7fd ff22 	bl	80005f8 <__aeabi_uldivmod>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e049      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027bc:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	f04f 0400 	mov.w	r4, #0
 80027c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	ea03 0501 	and.w	r5, r3, r1
 80027d2:	ea04 0602 	and.w	r6, r4, r2
 80027d6:	4629      	mov	r1, r5
 80027d8:	4632      	mov	r2, r6
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f04f 0400 	mov.w	r4, #0
 80027e2:	0154      	lsls	r4, r2, #5
 80027e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027e8:	014b      	lsls	r3, r1, #5
 80027ea:	4619      	mov	r1, r3
 80027ec:	4622      	mov	r2, r4
 80027ee:	1b49      	subs	r1, r1, r5
 80027f0:	eb62 0206 	sbc.w	r2, r2, r6
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	f04f 0400 	mov.w	r4, #0
 80027fc:	0194      	lsls	r4, r2, #6
 80027fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002802:	018b      	lsls	r3, r1, #6
 8002804:	1a5b      	subs	r3, r3, r1
 8002806:	eb64 0402 	sbc.w	r4, r4, r2
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	00e2      	lsls	r2, r4, #3
 8002814:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002818:	00d9      	lsls	r1, r3, #3
 800281a:	460b      	mov	r3, r1
 800281c:	4614      	mov	r4, r2
 800281e:	195b      	adds	r3, r3, r5
 8002820:	eb44 0406 	adc.w	r4, r4, r6
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	02a2      	lsls	r2, r4, #10
 800282e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002832:	0299      	lsls	r1, r3, #10
 8002834:	460b      	mov	r3, r1
 8002836:	4614      	mov	r4, r2
 8002838:	4618      	mov	r0, r3
 800283a:	4621      	mov	r1, r4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	461a      	mov	r2, r3
 8002844:	4623      	mov	r3, r4
 8002846:	f7fd fed7 	bl	80005f8 <__aeabi_uldivmod>
 800284a:	4603      	mov	r3, r0
 800284c:	460c      	mov	r4, r1
 800284e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	60bb      	str	r3, [r7, #8]
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800286e:	60bb      	str	r3, [r7, #8]
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	68bb      	ldr	r3, [r7, #8]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	00f42400 	.word	0x00f42400
 8002884:	007a1200 	.word	0x007a1200

08002888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_RCC_GetHCLKFreq+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000000 	.word	0x20000000

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028a4:	f7ff fff0 	bl	8002888 <HAL_RCC_GetHCLKFreq>
 80028a8:	4601      	mov	r1, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0a9b      	lsrs	r3, r3, #10
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	08003184 	.word	0x08003184

080028c8 <__errno>:
 80028c8:	4b01      	ldr	r3, [pc, #4]	; (80028d0 <__errno+0x8>)
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000000c 	.word	0x2000000c

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4e0d      	ldr	r6, [pc, #52]	; (800290c <__libc_init_array+0x38>)
 80028d8:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <__libc_init_array+0x3c>)
 80028da:	1ba4      	subs	r4, r4, r6
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	2500      	movs	r5, #0
 80028e0:	42a5      	cmp	r5, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	4e0b      	ldr	r6, [pc, #44]	; (8002914 <__libc_init_array+0x40>)
 80028e6:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <__libc_init_array+0x44>)
 80028e8:	f000 fc26 	bl	8003138 <_init>
 80028ec:	1ba4      	subs	r4, r4, r6
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	2500      	movs	r5, #0
 80028f2:	42a5      	cmp	r5, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fc:	4798      	blx	r3
 80028fe:	3501      	adds	r5, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002906:	4798      	blx	r3
 8002908:	3501      	adds	r5, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	080031c8 	.word	0x080031c8
 8002910:	080031c8 	.word	0x080031c8
 8002914:	080031c8 	.word	0x080031c8
 8002918:	080031cc 	.word	0x080031cc

0800291c <memset>:
 800291c:	4402      	add	r2, r0
 800291e:	4603      	mov	r3, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <memset+0xa>
 8002924:	4770      	bx	lr
 8002926:	f803 1b01 	strb.w	r1, [r3], #1
 800292a:	e7f9      	b.n	8002920 <memset+0x4>

0800292c <siprintf>:
 800292c:	b40e      	push	{r1, r2, r3}
 800292e:	b500      	push	{lr}
 8002930:	b09c      	sub	sp, #112	; 0x70
 8002932:	ab1d      	add	r3, sp, #116	; 0x74
 8002934:	9002      	str	r0, [sp, #8]
 8002936:	9006      	str	r0, [sp, #24]
 8002938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800293c:	4809      	ldr	r0, [pc, #36]	; (8002964 <siprintf+0x38>)
 800293e:	9107      	str	r1, [sp, #28]
 8002940:	9104      	str	r1, [sp, #16]
 8002942:	4909      	ldr	r1, [pc, #36]	; (8002968 <siprintf+0x3c>)
 8002944:	f853 2b04 	ldr.w	r2, [r3], #4
 8002948:	9105      	str	r1, [sp, #20]
 800294a:	6800      	ldr	r0, [r0, #0]
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	a902      	add	r1, sp, #8
 8002950:	f000 f866 	bl	8002a20 <_svfiprintf_r>
 8002954:	9b02      	ldr	r3, [sp, #8]
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	b01c      	add	sp, #112	; 0x70
 800295c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002960:	b003      	add	sp, #12
 8002962:	4770      	bx	lr
 8002964:	2000000c 	.word	0x2000000c
 8002968:	ffff0208 	.word	0xffff0208

0800296c <__ssputs_r>:
 800296c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002970:	688e      	ldr	r6, [r1, #8]
 8002972:	429e      	cmp	r6, r3
 8002974:	4682      	mov	sl, r0
 8002976:	460c      	mov	r4, r1
 8002978:	4690      	mov	r8, r2
 800297a:	4699      	mov	r9, r3
 800297c:	d837      	bhi.n	80029ee <__ssputs_r+0x82>
 800297e:	898a      	ldrh	r2, [r1, #12]
 8002980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002984:	d031      	beq.n	80029ea <__ssputs_r+0x7e>
 8002986:	6825      	ldr	r5, [r4, #0]
 8002988:	6909      	ldr	r1, [r1, #16]
 800298a:	1a6f      	subs	r7, r5, r1
 800298c:	6965      	ldr	r5, [r4, #20]
 800298e:	2302      	movs	r3, #2
 8002990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002994:	fb95 f5f3 	sdiv	r5, r5, r3
 8002998:	f109 0301 	add.w	r3, r9, #1
 800299c:	443b      	add	r3, r7
 800299e:	429d      	cmp	r5, r3
 80029a0:	bf38      	it	cc
 80029a2:	461d      	movcc	r5, r3
 80029a4:	0553      	lsls	r3, r2, #21
 80029a6:	d530      	bpl.n	8002a0a <__ssputs_r+0x9e>
 80029a8:	4629      	mov	r1, r5
 80029aa:	f000 fb2b 	bl	8003004 <_malloc_r>
 80029ae:	4606      	mov	r6, r0
 80029b0:	b950      	cbnz	r0, 80029c8 <__ssputs_r+0x5c>
 80029b2:	230c      	movs	r3, #12
 80029b4:	f8ca 3000 	str.w	r3, [sl]
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029be:	81a3      	strh	r3, [r4, #12]
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c8:	463a      	mov	r2, r7
 80029ca:	6921      	ldr	r1, [r4, #16]
 80029cc:	f000 faa8 	bl	8002f20 <memcpy>
 80029d0:	89a3      	ldrh	r3, [r4, #12]
 80029d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029da:	81a3      	strh	r3, [r4, #12]
 80029dc:	6126      	str	r6, [r4, #16]
 80029de:	6165      	str	r5, [r4, #20]
 80029e0:	443e      	add	r6, r7
 80029e2:	1bed      	subs	r5, r5, r7
 80029e4:	6026      	str	r6, [r4, #0]
 80029e6:	60a5      	str	r5, [r4, #8]
 80029e8:	464e      	mov	r6, r9
 80029ea:	454e      	cmp	r6, r9
 80029ec:	d900      	bls.n	80029f0 <__ssputs_r+0x84>
 80029ee:	464e      	mov	r6, r9
 80029f0:	4632      	mov	r2, r6
 80029f2:	4641      	mov	r1, r8
 80029f4:	6820      	ldr	r0, [r4, #0]
 80029f6:	f000 fa9e 	bl	8002f36 <memmove>
 80029fa:	68a3      	ldr	r3, [r4, #8]
 80029fc:	1b9b      	subs	r3, r3, r6
 80029fe:	60a3      	str	r3, [r4, #8]
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	441e      	add	r6, r3
 8002a04:	6026      	str	r6, [r4, #0]
 8002a06:	2000      	movs	r0, #0
 8002a08:	e7dc      	b.n	80029c4 <__ssputs_r+0x58>
 8002a0a:	462a      	mov	r2, r5
 8002a0c:	f000 fb54 	bl	80030b8 <_realloc_r>
 8002a10:	4606      	mov	r6, r0
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d1e2      	bne.n	80029dc <__ssputs_r+0x70>
 8002a16:	6921      	ldr	r1, [r4, #16]
 8002a18:	4650      	mov	r0, sl
 8002a1a:	f000 faa5 	bl	8002f68 <_free_r>
 8002a1e:	e7c8      	b.n	80029b2 <__ssputs_r+0x46>

08002a20 <_svfiprintf_r>:
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	461d      	mov	r5, r3
 8002a26:	898b      	ldrh	r3, [r1, #12]
 8002a28:	061f      	lsls	r7, r3, #24
 8002a2a:	b09d      	sub	sp, #116	; 0x74
 8002a2c:	4680      	mov	r8, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	4616      	mov	r6, r2
 8002a32:	d50f      	bpl.n	8002a54 <_svfiprintf_r+0x34>
 8002a34:	690b      	ldr	r3, [r1, #16]
 8002a36:	b96b      	cbnz	r3, 8002a54 <_svfiprintf_r+0x34>
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	f000 fae3 	bl	8003004 <_malloc_r>
 8002a3e:	6020      	str	r0, [r4, #0]
 8002a40:	6120      	str	r0, [r4, #16]
 8002a42:	b928      	cbnz	r0, 8002a50 <_svfiprintf_r+0x30>
 8002a44:	230c      	movs	r3, #12
 8002a46:	f8c8 3000 	str.w	r3, [r8]
 8002a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4e:	e0c8      	b.n	8002be2 <_svfiprintf_r+0x1c2>
 8002a50:	2340      	movs	r3, #64	; 0x40
 8002a52:	6163      	str	r3, [r4, #20]
 8002a54:	2300      	movs	r3, #0
 8002a56:	9309      	str	r3, [sp, #36]	; 0x24
 8002a58:	2320      	movs	r3, #32
 8002a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a5e:	2330      	movs	r3, #48	; 0x30
 8002a60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a64:	9503      	str	r5, [sp, #12]
 8002a66:	f04f 0b01 	mov.w	fp, #1
 8002a6a:	4637      	mov	r7, r6
 8002a6c:	463d      	mov	r5, r7
 8002a6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a72:	b10b      	cbz	r3, 8002a78 <_svfiprintf_r+0x58>
 8002a74:	2b25      	cmp	r3, #37	; 0x25
 8002a76:	d13e      	bne.n	8002af6 <_svfiprintf_r+0xd6>
 8002a78:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a7c:	d00b      	beq.n	8002a96 <_svfiprintf_r+0x76>
 8002a7e:	4653      	mov	r3, sl
 8002a80:	4632      	mov	r2, r6
 8002a82:	4621      	mov	r1, r4
 8002a84:	4640      	mov	r0, r8
 8002a86:	f7ff ff71 	bl	800296c <__ssputs_r>
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	f000 80a4 	beq.w	8002bd8 <_svfiprintf_r+0x1b8>
 8002a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a92:	4453      	add	r3, sl
 8002a94:	9309      	str	r3, [sp, #36]	; 0x24
 8002a96:	783b      	ldrb	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 809d 	beq.w	8002bd8 <_svfiprintf_r+0x1b8>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002aa8:	9304      	str	r3, [sp, #16]
 8002aaa:	9307      	str	r3, [sp, #28]
 8002aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ab2:	462f      	mov	r7, r5
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002aba:	4850      	ldr	r0, [pc, #320]	; (8002bfc <_svfiprintf_r+0x1dc>)
 8002abc:	f7fd fb90 	bl	80001e0 <memchr>
 8002ac0:	9b04      	ldr	r3, [sp, #16]
 8002ac2:	b9d0      	cbnz	r0, 8002afa <_svfiprintf_r+0xda>
 8002ac4:	06d9      	lsls	r1, r3, #27
 8002ac6:	bf44      	itt	mi
 8002ac8:	2220      	movmi	r2, #32
 8002aca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ace:	071a      	lsls	r2, r3, #28
 8002ad0:	bf44      	itt	mi
 8002ad2:	222b      	movmi	r2, #43	; 0x2b
 8002ad4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ad8:	782a      	ldrb	r2, [r5, #0]
 8002ada:	2a2a      	cmp	r2, #42	; 0x2a
 8002adc:	d015      	beq.n	8002b0a <_svfiprintf_r+0xea>
 8002ade:	9a07      	ldr	r2, [sp, #28]
 8002ae0:	462f      	mov	r7, r5
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	250a      	movs	r5, #10
 8002ae6:	4639      	mov	r1, r7
 8002ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aec:	3b30      	subs	r3, #48	; 0x30
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	d94d      	bls.n	8002b8e <_svfiprintf_r+0x16e>
 8002af2:	b1b8      	cbz	r0, 8002b24 <_svfiprintf_r+0x104>
 8002af4:	e00f      	b.n	8002b16 <_svfiprintf_r+0xf6>
 8002af6:	462f      	mov	r7, r5
 8002af8:	e7b8      	b.n	8002a6c <_svfiprintf_r+0x4c>
 8002afa:	4a40      	ldr	r2, [pc, #256]	; (8002bfc <_svfiprintf_r+0x1dc>)
 8002afc:	1a80      	subs	r0, r0, r2
 8002afe:	fa0b f000 	lsl.w	r0, fp, r0
 8002b02:	4318      	orrs	r0, r3
 8002b04:	9004      	str	r0, [sp, #16]
 8002b06:	463d      	mov	r5, r7
 8002b08:	e7d3      	b.n	8002ab2 <_svfiprintf_r+0x92>
 8002b0a:	9a03      	ldr	r2, [sp, #12]
 8002b0c:	1d11      	adds	r1, r2, #4
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	9103      	str	r1, [sp, #12]
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	db01      	blt.n	8002b1a <_svfiprintf_r+0xfa>
 8002b16:	9207      	str	r2, [sp, #28]
 8002b18:	e004      	b.n	8002b24 <_svfiprintf_r+0x104>
 8002b1a:	4252      	negs	r2, r2
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	9207      	str	r2, [sp, #28]
 8002b22:	9304      	str	r3, [sp, #16]
 8002b24:	783b      	ldrb	r3, [r7, #0]
 8002b26:	2b2e      	cmp	r3, #46	; 0x2e
 8002b28:	d10c      	bne.n	8002b44 <_svfiprintf_r+0x124>
 8002b2a:	787b      	ldrb	r3, [r7, #1]
 8002b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b2e:	d133      	bne.n	8002b98 <_svfiprintf_r+0x178>
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	1d1a      	adds	r2, r3, #4
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	9203      	str	r2, [sp, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bfb8      	it	lt
 8002b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b40:	3702      	adds	r7, #2
 8002b42:	9305      	str	r3, [sp, #20]
 8002b44:	4d2e      	ldr	r5, [pc, #184]	; (8002c00 <_svfiprintf_r+0x1e0>)
 8002b46:	7839      	ldrb	r1, [r7, #0]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f7fd fb48 	bl	80001e0 <memchr>
 8002b50:	b138      	cbz	r0, 8002b62 <_svfiprintf_r+0x142>
 8002b52:	2340      	movs	r3, #64	; 0x40
 8002b54:	1b40      	subs	r0, r0, r5
 8002b56:	fa03 f000 	lsl.w	r0, r3, r0
 8002b5a:	9b04      	ldr	r3, [sp, #16]
 8002b5c:	4303      	orrs	r3, r0
 8002b5e:	3701      	adds	r7, #1
 8002b60:	9304      	str	r3, [sp, #16]
 8002b62:	7839      	ldrb	r1, [r7, #0]
 8002b64:	4827      	ldr	r0, [pc, #156]	; (8002c04 <_svfiprintf_r+0x1e4>)
 8002b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b6a:	2206      	movs	r2, #6
 8002b6c:	1c7e      	adds	r6, r7, #1
 8002b6e:	f7fd fb37 	bl	80001e0 <memchr>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d038      	beq.n	8002be8 <_svfiprintf_r+0x1c8>
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <_svfiprintf_r+0x1e8>)
 8002b78:	bb13      	cbnz	r3, 8002bc0 <_svfiprintf_r+0x1a0>
 8002b7a:	9b03      	ldr	r3, [sp, #12]
 8002b7c:	3307      	adds	r3, #7
 8002b7e:	f023 0307 	bic.w	r3, r3, #7
 8002b82:	3308      	adds	r3, #8
 8002b84:	9303      	str	r3, [sp, #12]
 8002b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b88:	444b      	add	r3, r9
 8002b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b8c:	e76d      	b.n	8002a6a <_svfiprintf_r+0x4a>
 8002b8e:	fb05 3202 	mla	r2, r5, r2, r3
 8002b92:	2001      	movs	r0, #1
 8002b94:	460f      	mov	r7, r1
 8002b96:	e7a6      	b.n	8002ae6 <_svfiprintf_r+0xc6>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	3701      	adds	r7, #1
 8002b9c:	9305      	str	r3, [sp, #20]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	250a      	movs	r5, #10
 8002ba2:	4638      	mov	r0, r7
 8002ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ba8:	3a30      	subs	r2, #48	; 0x30
 8002baa:	2a09      	cmp	r2, #9
 8002bac:	d903      	bls.n	8002bb6 <_svfiprintf_r+0x196>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0c8      	beq.n	8002b44 <_svfiprintf_r+0x124>
 8002bb2:	9105      	str	r1, [sp, #20]
 8002bb4:	e7c6      	b.n	8002b44 <_svfiprintf_r+0x124>
 8002bb6:	fb05 2101 	mla	r1, r5, r1, r2
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4607      	mov	r7, r0
 8002bbe:	e7f0      	b.n	8002ba2 <_svfiprintf_r+0x182>
 8002bc0:	ab03      	add	r3, sp, #12
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <_svfiprintf_r+0x1ec>)
 8002bc8:	a904      	add	r1, sp, #16
 8002bca:	4640      	mov	r0, r8
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002bd4:	4681      	mov	r9, r0
 8002bd6:	d1d6      	bne.n	8002b86 <_svfiprintf_r+0x166>
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	065b      	lsls	r3, r3, #25
 8002bdc:	f53f af35 	bmi.w	8002a4a <_svfiprintf_r+0x2a>
 8002be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002be2:	b01d      	add	sp, #116	; 0x74
 8002be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be8:	ab03      	add	r3, sp, #12
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	4622      	mov	r2, r4
 8002bee:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <_svfiprintf_r+0x1ec>)
 8002bf0:	a904      	add	r1, sp, #16
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f000 f882 	bl	8002cfc <_printf_i>
 8002bf8:	e7ea      	b.n	8002bd0 <_svfiprintf_r+0x1b0>
 8002bfa:	bf00      	nop
 8002bfc:	0800318c 	.word	0x0800318c
 8002c00:	08003192 	.word	0x08003192
 8002c04:	08003196 	.word	0x08003196
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	0800296d 	.word	0x0800296d

08002c10 <_printf_common>:
 8002c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c14:	4691      	mov	r9, r2
 8002c16:	461f      	mov	r7, r3
 8002c18:	688a      	ldr	r2, [r1, #8]
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bfb8      	it	lt
 8002c24:	4613      	movlt	r3, r2
 8002c26:	f8c9 3000 	str.w	r3, [r9]
 8002c2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c2e:	4606      	mov	r6, r0
 8002c30:	460c      	mov	r4, r1
 8002c32:	b112      	cbz	r2, 8002c3a <_printf_common+0x2a>
 8002c34:	3301      	adds	r3, #1
 8002c36:	f8c9 3000 	str.w	r3, [r9]
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	0699      	lsls	r1, r3, #26
 8002c3e:	bf42      	ittt	mi
 8002c40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c44:	3302      	addmi	r3, #2
 8002c46:	f8c9 3000 	strmi.w	r3, [r9]
 8002c4a:	6825      	ldr	r5, [r4, #0]
 8002c4c:	f015 0506 	ands.w	r5, r5, #6
 8002c50:	d107      	bne.n	8002c62 <_printf_common+0x52>
 8002c52:	f104 0a19 	add.w	sl, r4, #25
 8002c56:	68e3      	ldr	r3, [r4, #12]
 8002c58:	f8d9 2000 	ldr.w	r2, [r9]
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	42ab      	cmp	r3, r5
 8002c60:	dc28      	bgt.n	8002cb4 <_printf_common+0xa4>
 8002c62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	3300      	adds	r3, #0
 8002c6a:	bf18      	it	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	0692      	lsls	r2, r2, #26
 8002c70:	d42d      	bmi.n	8002cce <_printf_common+0xbe>
 8002c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c76:	4639      	mov	r1, r7
 8002c78:	4630      	mov	r0, r6
 8002c7a:	47c0      	blx	r8
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d020      	beq.n	8002cc2 <_printf_common+0xb2>
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	68e5      	ldr	r5, [r4, #12]
 8002c84:	f8d9 2000 	ldr.w	r2, [r9]
 8002c88:	f003 0306 	and.w	r3, r3, #6
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	bf08      	it	eq
 8002c90:	1aad      	subeq	r5, r5, r2
 8002c92:	68a3      	ldr	r3, [r4, #8]
 8002c94:	6922      	ldr	r2, [r4, #16]
 8002c96:	bf0c      	ite	eq
 8002c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c9c:	2500      	movne	r5, #0
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bfc4      	itt	gt
 8002ca2:	1a9b      	subgt	r3, r3, r2
 8002ca4:	18ed      	addgt	r5, r5, r3
 8002ca6:	f04f 0900 	mov.w	r9, #0
 8002caa:	341a      	adds	r4, #26
 8002cac:	454d      	cmp	r5, r9
 8002cae:	d11a      	bne.n	8002ce6 <_printf_common+0xd6>
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	e008      	b.n	8002cc6 <_printf_common+0xb6>
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	4652      	mov	r2, sl
 8002cb8:	4639      	mov	r1, r7
 8002cba:	4630      	mov	r0, r6
 8002cbc:	47c0      	blx	r8
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	d103      	bne.n	8002cca <_printf_common+0xba>
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cca:	3501      	adds	r5, #1
 8002ccc:	e7c3      	b.n	8002c56 <_printf_common+0x46>
 8002cce:	18e1      	adds	r1, r4, r3
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	2030      	movs	r0, #48	; 0x30
 8002cd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cd8:	4422      	add	r2, r4
 8002cda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002cde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	e7c5      	b.n	8002c72 <_printf_common+0x62>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	4622      	mov	r2, r4
 8002cea:	4639      	mov	r1, r7
 8002cec:	4630      	mov	r0, r6
 8002cee:	47c0      	blx	r8
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d0e6      	beq.n	8002cc2 <_printf_common+0xb2>
 8002cf4:	f109 0901 	add.w	r9, r9, #1
 8002cf8:	e7d8      	b.n	8002cac <_printf_common+0x9c>
	...

08002cfc <_printf_i>:
 8002cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d04:	460c      	mov	r4, r1
 8002d06:	7e09      	ldrb	r1, [r1, #24]
 8002d08:	b085      	sub	sp, #20
 8002d0a:	296e      	cmp	r1, #110	; 0x6e
 8002d0c:	4617      	mov	r7, r2
 8002d0e:	4606      	mov	r6, r0
 8002d10:	4698      	mov	r8, r3
 8002d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d14:	f000 80b3 	beq.w	8002e7e <_printf_i+0x182>
 8002d18:	d822      	bhi.n	8002d60 <_printf_i+0x64>
 8002d1a:	2963      	cmp	r1, #99	; 0x63
 8002d1c:	d036      	beq.n	8002d8c <_printf_i+0x90>
 8002d1e:	d80a      	bhi.n	8002d36 <_printf_i+0x3a>
 8002d20:	2900      	cmp	r1, #0
 8002d22:	f000 80b9 	beq.w	8002e98 <_printf_i+0x19c>
 8002d26:	2958      	cmp	r1, #88	; 0x58
 8002d28:	f000 8083 	beq.w	8002e32 <_printf_i+0x136>
 8002d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002d34:	e032      	b.n	8002d9c <_printf_i+0xa0>
 8002d36:	2964      	cmp	r1, #100	; 0x64
 8002d38:	d001      	beq.n	8002d3e <_printf_i+0x42>
 8002d3a:	2969      	cmp	r1, #105	; 0x69
 8002d3c:	d1f6      	bne.n	8002d2c <_printf_i+0x30>
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	0605      	lsls	r5, r0, #24
 8002d44:	f103 0104 	add.w	r1, r3, #4
 8002d48:	d52a      	bpl.n	8002da0 <_printf_i+0xa4>
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6011      	str	r1, [r2, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da03      	bge.n	8002d5a <_printf_i+0x5e>
 8002d52:	222d      	movs	r2, #45	; 0x2d
 8002d54:	425b      	negs	r3, r3
 8002d56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d5a:	486f      	ldr	r0, [pc, #444]	; (8002f18 <_printf_i+0x21c>)
 8002d5c:	220a      	movs	r2, #10
 8002d5e:	e039      	b.n	8002dd4 <_printf_i+0xd8>
 8002d60:	2973      	cmp	r1, #115	; 0x73
 8002d62:	f000 809d 	beq.w	8002ea0 <_printf_i+0x1a4>
 8002d66:	d808      	bhi.n	8002d7a <_printf_i+0x7e>
 8002d68:	296f      	cmp	r1, #111	; 0x6f
 8002d6a:	d020      	beq.n	8002dae <_printf_i+0xb2>
 8002d6c:	2970      	cmp	r1, #112	; 0x70
 8002d6e:	d1dd      	bne.n	8002d2c <_printf_i+0x30>
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	f043 0320 	orr.w	r3, r3, #32
 8002d76:	6023      	str	r3, [r4, #0]
 8002d78:	e003      	b.n	8002d82 <_printf_i+0x86>
 8002d7a:	2975      	cmp	r1, #117	; 0x75
 8002d7c:	d017      	beq.n	8002dae <_printf_i+0xb2>
 8002d7e:	2978      	cmp	r1, #120	; 0x78
 8002d80:	d1d4      	bne.n	8002d2c <_printf_i+0x30>
 8002d82:	2378      	movs	r3, #120	; 0x78
 8002d84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d88:	4864      	ldr	r0, [pc, #400]	; (8002f1c <_printf_i+0x220>)
 8002d8a:	e055      	b.n	8002e38 <_printf_i+0x13c>
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	1d19      	adds	r1, r3, #4
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6011      	str	r1, [r2, #0]
 8002d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e08c      	b.n	8002eba <_printf_i+0x1be>
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6011      	str	r1, [r2, #0]
 8002da4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002da8:	bf18      	it	ne
 8002daa:	b21b      	sxthne	r3, r3
 8002dac:	e7cf      	b.n	8002d4e <_printf_i+0x52>
 8002dae:	6813      	ldr	r3, [r2, #0]
 8002db0:	6825      	ldr	r5, [r4, #0]
 8002db2:	1d18      	adds	r0, r3, #4
 8002db4:	6010      	str	r0, [r2, #0]
 8002db6:	0628      	lsls	r0, r5, #24
 8002db8:	d501      	bpl.n	8002dbe <_printf_i+0xc2>
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	e002      	b.n	8002dc4 <_printf_i+0xc8>
 8002dbe:	0668      	lsls	r0, r5, #25
 8002dc0:	d5fb      	bpl.n	8002dba <_printf_i+0xbe>
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	4854      	ldr	r0, [pc, #336]	; (8002f18 <_printf_i+0x21c>)
 8002dc6:	296f      	cmp	r1, #111	; 0x6f
 8002dc8:	bf14      	ite	ne
 8002dca:	220a      	movne	r2, #10
 8002dcc:	2208      	moveq	r2, #8
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dd4:	6865      	ldr	r5, [r4, #4]
 8002dd6:	60a5      	str	r5, [r4, #8]
 8002dd8:	2d00      	cmp	r5, #0
 8002dda:	f2c0 8095 	blt.w	8002f08 <_printf_i+0x20c>
 8002dde:	6821      	ldr	r1, [r4, #0]
 8002de0:	f021 0104 	bic.w	r1, r1, #4
 8002de4:	6021      	str	r1, [r4, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d13d      	bne.n	8002e66 <_printf_i+0x16a>
 8002dea:	2d00      	cmp	r5, #0
 8002dec:	f040 808e 	bne.w	8002f0c <_printf_i+0x210>
 8002df0:	4665      	mov	r5, ip
 8002df2:	2a08      	cmp	r2, #8
 8002df4:	d10b      	bne.n	8002e0e <_printf_i+0x112>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	07db      	lsls	r3, r3, #31
 8002dfa:	d508      	bpl.n	8002e0e <_printf_i+0x112>
 8002dfc:	6923      	ldr	r3, [r4, #16]
 8002dfe:	6862      	ldr	r2, [r4, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	bfde      	ittt	le
 8002e04:	2330      	movle	r3, #48	; 0x30
 8002e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e0e:	ebac 0305 	sub.w	r3, ip, r5
 8002e12:	6123      	str	r3, [r4, #16]
 8002e14:	f8cd 8000 	str.w	r8, [sp]
 8002e18:	463b      	mov	r3, r7
 8002e1a:	aa03      	add	r2, sp, #12
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f7ff fef6 	bl	8002c10 <_printf_common>
 8002e24:	3001      	adds	r0, #1
 8002e26:	d14d      	bne.n	8002ec4 <_printf_i+0x1c8>
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	b005      	add	sp, #20
 8002e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e32:	4839      	ldr	r0, [pc, #228]	; (8002f18 <_printf_i+0x21c>)
 8002e34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	6821      	ldr	r1, [r4, #0]
 8002e3c:	1d1d      	adds	r5, r3, #4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6015      	str	r5, [r2, #0]
 8002e42:	060a      	lsls	r2, r1, #24
 8002e44:	d50b      	bpl.n	8002e5e <_printf_i+0x162>
 8002e46:	07ca      	lsls	r2, r1, #31
 8002e48:	bf44      	itt	mi
 8002e4a:	f041 0120 	orrmi.w	r1, r1, #32
 8002e4e:	6021      	strmi	r1, [r4, #0]
 8002e50:	b91b      	cbnz	r3, 8002e5a <_printf_i+0x15e>
 8002e52:	6822      	ldr	r2, [r4, #0]
 8002e54:	f022 0220 	bic.w	r2, r2, #32
 8002e58:	6022      	str	r2, [r4, #0]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	e7b7      	b.n	8002dce <_printf_i+0xd2>
 8002e5e:	064d      	lsls	r5, r1, #25
 8002e60:	bf48      	it	mi
 8002e62:	b29b      	uxthmi	r3, r3
 8002e64:	e7ef      	b.n	8002e46 <_printf_i+0x14a>
 8002e66:	4665      	mov	r5, ip
 8002e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e6c:	fb02 3311 	mls	r3, r2, r1, r3
 8002e70:	5cc3      	ldrb	r3, [r0, r3]
 8002e72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e76:	460b      	mov	r3, r1
 8002e78:	2900      	cmp	r1, #0
 8002e7a:	d1f5      	bne.n	8002e68 <_printf_i+0x16c>
 8002e7c:	e7b9      	b.n	8002df2 <_printf_i+0xf6>
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	6825      	ldr	r5, [r4, #0]
 8002e82:	6961      	ldr	r1, [r4, #20]
 8002e84:	1d18      	adds	r0, r3, #4
 8002e86:	6010      	str	r0, [r2, #0]
 8002e88:	0628      	lsls	r0, r5, #24
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	d501      	bpl.n	8002e92 <_printf_i+0x196>
 8002e8e:	6019      	str	r1, [r3, #0]
 8002e90:	e002      	b.n	8002e98 <_printf_i+0x19c>
 8002e92:	066a      	lsls	r2, r5, #25
 8002e94:	d5fb      	bpl.n	8002e8e <_printf_i+0x192>
 8002e96:	8019      	strh	r1, [r3, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6123      	str	r3, [r4, #16]
 8002e9c:	4665      	mov	r5, ip
 8002e9e:	e7b9      	b.n	8002e14 <_printf_i+0x118>
 8002ea0:	6813      	ldr	r3, [r2, #0]
 8002ea2:	1d19      	adds	r1, r3, #4
 8002ea4:	6011      	str	r1, [r2, #0]
 8002ea6:	681d      	ldr	r5, [r3, #0]
 8002ea8:	6862      	ldr	r2, [r4, #4]
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4628      	mov	r0, r5
 8002eae:	f7fd f997 	bl	80001e0 <memchr>
 8002eb2:	b108      	cbz	r0, 8002eb8 <_printf_i+0x1bc>
 8002eb4:	1b40      	subs	r0, r0, r5
 8002eb6:	6060      	str	r0, [r4, #4]
 8002eb8:	6863      	ldr	r3, [r4, #4]
 8002eba:	6123      	str	r3, [r4, #16]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec2:	e7a7      	b.n	8002e14 <_printf_i+0x118>
 8002ec4:	6923      	ldr	r3, [r4, #16]
 8002ec6:	462a      	mov	r2, r5
 8002ec8:	4639      	mov	r1, r7
 8002eca:	4630      	mov	r0, r6
 8002ecc:	47c0      	blx	r8
 8002ece:	3001      	adds	r0, #1
 8002ed0:	d0aa      	beq.n	8002e28 <_printf_i+0x12c>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	079b      	lsls	r3, r3, #30
 8002ed6:	d413      	bmi.n	8002f00 <_printf_i+0x204>
 8002ed8:	68e0      	ldr	r0, [r4, #12]
 8002eda:	9b03      	ldr	r3, [sp, #12]
 8002edc:	4298      	cmp	r0, r3
 8002ede:	bfb8      	it	lt
 8002ee0:	4618      	movlt	r0, r3
 8002ee2:	e7a3      	b.n	8002e2c <_printf_i+0x130>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	464a      	mov	r2, r9
 8002ee8:	4639      	mov	r1, r7
 8002eea:	4630      	mov	r0, r6
 8002eec:	47c0      	blx	r8
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d09a      	beq.n	8002e28 <_printf_i+0x12c>
 8002ef2:	3501      	adds	r5, #1
 8002ef4:	68e3      	ldr	r3, [r4, #12]
 8002ef6:	9a03      	ldr	r2, [sp, #12]
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	42ab      	cmp	r3, r5
 8002efc:	dcf2      	bgt.n	8002ee4 <_printf_i+0x1e8>
 8002efe:	e7eb      	b.n	8002ed8 <_printf_i+0x1dc>
 8002f00:	2500      	movs	r5, #0
 8002f02:	f104 0919 	add.w	r9, r4, #25
 8002f06:	e7f5      	b.n	8002ef4 <_printf_i+0x1f8>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ac      	bne.n	8002e66 <_printf_i+0x16a>
 8002f0c:	7803      	ldrb	r3, [r0, #0]
 8002f0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f12:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f16:	e76c      	b.n	8002df2 <_printf_i+0xf6>
 8002f18:	0800319d 	.word	0x0800319d
 8002f1c:	080031ae 	.word	0x080031ae

08002f20 <memcpy>:
 8002f20:	b510      	push	{r4, lr}
 8002f22:	1e43      	subs	r3, r0, #1
 8002f24:	440a      	add	r2, r1
 8002f26:	4291      	cmp	r1, r2
 8002f28:	d100      	bne.n	8002f2c <memcpy+0xc>
 8002f2a:	bd10      	pop	{r4, pc}
 8002f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f34:	e7f7      	b.n	8002f26 <memcpy+0x6>

08002f36 <memmove>:
 8002f36:	4288      	cmp	r0, r1
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	eb01 0302 	add.w	r3, r1, r2
 8002f3e:	d807      	bhi.n	8002f50 <memmove+0x1a>
 8002f40:	1e42      	subs	r2, r0, #1
 8002f42:	4299      	cmp	r1, r3
 8002f44:	d00a      	beq.n	8002f5c <memmove+0x26>
 8002f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f4a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f4e:	e7f8      	b.n	8002f42 <memmove+0xc>
 8002f50:	4283      	cmp	r3, r0
 8002f52:	d9f5      	bls.n	8002f40 <memmove+0xa>
 8002f54:	1881      	adds	r1, r0, r2
 8002f56:	1ad2      	subs	r2, r2, r3
 8002f58:	42d3      	cmn	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memmove+0x28>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f66:	e7f7      	b.n	8002f58 <memmove+0x22>

08002f68 <_free_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4605      	mov	r5, r0
 8002f6c:	2900      	cmp	r1, #0
 8002f6e:	d045      	beq.n	8002ffc <_free_r+0x94>
 8002f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f74:	1f0c      	subs	r4, r1, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bfb8      	it	lt
 8002f7a:	18e4      	addlt	r4, r4, r3
 8002f7c:	f000 f8d2 	bl	8003124 <__malloc_lock>
 8002f80:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <_free_r+0x98>)
 8002f82:	6813      	ldr	r3, [r2, #0]
 8002f84:	4610      	mov	r0, r2
 8002f86:	b933      	cbnz	r3, 8002f96 <_free_r+0x2e>
 8002f88:	6063      	str	r3, [r4, #4]
 8002f8a:	6014      	str	r4, [r2, #0]
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f92:	f000 b8c8 	b.w	8003126 <__malloc_unlock>
 8002f96:	42a3      	cmp	r3, r4
 8002f98:	d90c      	bls.n	8002fb4 <_free_r+0x4c>
 8002f9a:	6821      	ldr	r1, [r4, #0]
 8002f9c:	1862      	adds	r2, r4, r1
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	bf04      	itt	eq
 8002fa2:	681a      	ldreq	r2, [r3, #0]
 8002fa4:	685b      	ldreq	r3, [r3, #4]
 8002fa6:	6063      	str	r3, [r4, #4]
 8002fa8:	bf04      	itt	eq
 8002faa:	1852      	addeq	r2, r2, r1
 8002fac:	6022      	streq	r2, [r4, #0]
 8002fae:	6004      	str	r4, [r0, #0]
 8002fb0:	e7ec      	b.n	8002f8c <_free_r+0x24>
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	b10a      	cbz	r2, 8002fbc <_free_r+0x54>
 8002fb8:	42a2      	cmp	r2, r4
 8002fba:	d9fa      	bls.n	8002fb2 <_free_r+0x4a>
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	1858      	adds	r0, r3, r1
 8002fc0:	42a0      	cmp	r0, r4
 8002fc2:	d10b      	bne.n	8002fdc <_free_r+0x74>
 8002fc4:	6820      	ldr	r0, [r4, #0]
 8002fc6:	4401      	add	r1, r0
 8002fc8:	1858      	adds	r0, r3, r1
 8002fca:	4282      	cmp	r2, r0
 8002fcc:	6019      	str	r1, [r3, #0]
 8002fce:	d1dd      	bne.n	8002f8c <_free_r+0x24>
 8002fd0:	6810      	ldr	r0, [r2, #0]
 8002fd2:	6852      	ldr	r2, [r2, #4]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	4401      	add	r1, r0
 8002fd8:	6019      	str	r1, [r3, #0]
 8002fda:	e7d7      	b.n	8002f8c <_free_r+0x24>
 8002fdc:	d902      	bls.n	8002fe4 <_free_r+0x7c>
 8002fde:	230c      	movs	r3, #12
 8002fe0:	602b      	str	r3, [r5, #0]
 8002fe2:	e7d3      	b.n	8002f8c <_free_r+0x24>
 8002fe4:	6820      	ldr	r0, [r4, #0]
 8002fe6:	1821      	adds	r1, r4, r0
 8002fe8:	428a      	cmp	r2, r1
 8002fea:	bf04      	itt	eq
 8002fec:	6811      	ldreq	r1, [r2, #0]
 8002fee:	6852      	ldreq	r2, [r2, #4]
 8002ff0:	6062      	str	r2, [r4, #4]
 8002ff2:	bf04      	itt	eq
 8002ff4:	1809      	addeq	r1, r1, r0
 8002ff6:	6021      	streq	r1, [r4, #0]
 8002ff8:	605c      	str	r4, [r3, #4]
 8002ffa:	e7c7      	b.n	8002f8c <_free_r+0x24>
 8002ffc:	bd38      	pop	{r3, r4, r5, pc}
 8002ffe:	bf00      	nop
 8003000:	20000090 	.word	0x20000090

08003004 <_malloc_r>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	1ccd      	adds	r5, r1, #3
 8003008:	f025 0503 	bic.w	r5, r5, #3
 800300c:	3508      	adds	r5, #8
 800300e:	2d0c      	cmp	r5, #12
 8003010:	bf38      	it	cc
 8003012:	250c      	movcc	r5, #12
 8003014:	2d00      	cmp	r5, #0
 8003016:	4606      	mov	r6, r0
 8003018:	db01      	blt.n	800301e <_malloc_r+0x1a>
 800301a:	42a9      	cmp	r1, r5
 800301c:	d903      	bls.n	8003026 <_malloc_r+0x22>
 800301e:	230c      	movs	r3, #12
 8003020:	6033      	str	r3, [r6, #0]
 8003022:	2000      	movs	r0, #0
 8003024:	bd70      	pop	{r4, r5, r6, pc}
 8003026:	f000 f87d 	bl	8003124 <__malloc_lock>
 800302a:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <_malloc_r+0xac>)
 800302c:	6814      	ldr	r4, [r2, #0]
 800302e:	4621      	mov	r1, r4
 8003030:	b991      	cbnz	r1, 8003058 <_malloc_r+0x54>
 8003032:	4c20      	ldr	r4, [pc, #128]	; (80030b4 <_malloc_r+0xb0>)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	b91b      	cbnz	r3, 8003040 <_malloc_r+0x3c>
 8003038:	4630      	mov	r0, r6
 800303a:	f000 f863 	bl	8003104 <_sbrk_r>
 800303e:	6020      	str	r0, [r4, #0]
 8003040:	4629      	mov	r1, r5
 8003042:	4630      	mov	r0, r6
 8003044:	f000 f85e 	bl	8003104 <_sbrk_r>
 8003048:	1c43      	adds	r3, r0, #1
 800304a:	d124      	bne.n	8003096 <_malloc_r+0x92>
 800304c:	230c      	movs	r3, #12
 800304e:	6033      	str	r3, [r6, #0]
 8003050:	4630      	mov	r0, r6
 8003052:	f000 f868 	bl	8003126 <__malloc_unlock>
 8003056:	e7e4      	b.n	8003022 <_malloc_r+0x1e>
 8003058:	680b      	ldr	r3, [r1, #0]
 800305a:	1b5b      	subs	r3, r3, r5
 800305c:	d418      	bmi.n	8003090 <_malloc_r+0x8c>
 800305e:	2b0b      	cmp	r3, #11
 8003060:	d90f      	bls.n	8003082 <_malloc_r+0x7e>
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	50cd      	str	r5, [r1, r3]
 8003066:	18cc      	adds	r4, r1, r3
 8003068:	4630      	mov	r0, r6
 800306a:	f000 f85c 	bl	8003126 <__malloc_unlock>
 800306e:	f104 000b 	add.w	r0, r4, #11
 8003072:	1d23      	adds	r3, r4, #4
 8003074:	f020 0007 	bic.w	r0, r0, #7
 8003078:	1ac3      	subs	r3, r0, r3
 800307a:	d0d3      	beq.n	8003024 <_malloc_r+0x20>
 800307c:	425a      	negs	r2, r3
 800307e:	50e2      	str	r2, [r4, r3]
 8003080:	e7d0      	b.n	8003024 <_malloc_r+0x20>
 8003082:	428c      	cmp	r4, r1
 8003084:	684b      	ldr	r3, [r1, #4]
 8003086:	bf16      	itet	ne
 8003088:	6063      	strne	r3, [r4, #4]
 800308a:	6013      	streq	r3, [r2, #0]
 800308c:	460c      	movne	r4, r1
 800308e:	e7eb      	b.n	8003068 <_malloc_r+0x64>
 8003090:	460c      	mov	r4, r1
 8003092:	6849      	ldr	r1, [r1, #4]
 8003094:	e7cc      	b.n	8003030 <_malloc_r+0x2c>
 8003096:	1cc4      	adds	r4, r0, #3
 8003098:	f024 0403 	bic.w	r4, r4, #3
 800309c:	42a0      	cmp	r0, r4
 800309e:	d005      	beq.n	80030ac <_malloc_r+0xa8>
 80030a0:	1a21      	subs	r1, r4, r0
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 f82e 	bl	8003104 <_sbrk_r>
 80030a8:	3001      	adds	r0, #1
 80030aa:	d0cf      	beq.n	800304c <_malloc_r+0x48>
 80030ac:	6025      	str	r5, [r4, #0]
 80030ae:	e7db      	b.n	8003068 <_malloc_r+0x64>
 80030b0:	20000090 	.word	0x20000090
 80030b4:	20000094 	.word	0x20000094

080030b8 <_realloc_r>:
 80030b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ba:	4607      	mov	r7, r0
 80030bc:	4614      	mov	r4, r2
 80030be:	460e      	mov	r6, r1
 80030c0:	b921      	cbnz	r1, 80030cc <_realloc_r+0x14>
 80030c2:	4611      	mov	r1, r2
 80030c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030c8:	f7ff bf9c 	b.w	8003004 <_malloc_r>
 80030cc:	b922      	cbnz	r2, 80030d8 <_realloc_r+0x20>
 80030ce:	f7ff ff4b 	bl	8002f68 <_free_r>
 80030d2:	4625      	mov	r5, r4
 80030d4:	4628      	mov	r0, r5
 80030d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d8:	f000 f826 	bl	8003128 <_malloc_usable_size_r>
 80030dc:	42a0      	cmp	r0, r4
 80030de:	d20f      	bcs.n	8003100 <_realloc_r+0x48>
 80030e0:	4621      	mov	r1, r4
 80030e2:	4638      	mov	r0, r7
 80030e4:	f7ff ff8e 	bl	8003004 <_malloc_r>
 80030e8:	4605      	mov	r5, r0
 80030ea:	2800      	cmp	r0, #0
 80030ec:	d0f2      	beq.n	80030d4 <_realloc_r+0x1c>
 80030ee:	4631      	mov	r1, r6
 80030f0:	4622      	mov	r2, r4
 80030f2:	f7ff ff15 	bl	8002f20 <memcpy>
 80030f6:	4631      	mov	r1, r6
 80030f8:	4638      	mov	r0, r7
 80030fa:	f7ff ff35 	bl	8002f68 <_free_r>
 80030fe:	e7e9      	b.n	80030d4 <_realloc_r+0x1c>
 8003100:	4635      	mov	r5, r6
 8003102:	e7e7      	b.n	80030d4 <_realloc_r+0x1c>

08003104 <_sbrk_r>:
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	4c06      	ldr	r4, [pc, #24]	; (8003120 <_sbrk_r+0x1c>)
 8003108:	2300      	movs	r3, #0
 800310a:	4605      	mov	r5, r0
 800310c:	4608      	mov	r0, r1
 800310e:	6023      	str	r3, [r4, #0]
 8003110:	f7fd ffa8 	bl	8001064 <_sbrk>
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	d102      	bne.n	800311e <_sbrk_r+0x1a>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	b103      	cbz	r3, 800311e <_sbrk_r+0x1a>
 800311c:	602b      	str	r3, [r5, #0]
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	20000104 	.word	0x20000104

08003124 <__malloc_lock>:
 8003124:	4770      	bx	lr

08003126 <__malloc_unlock>:
 8003126:	4770      	bx	lr

08003128 <_malloc_usable_size_r>:
 8003128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800312c:	1f18      	subs	r0, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	bfbc      	itt	lt
 8003132:	580b      	ldrlt	r3, [r1, r0]
 8003134:	18c0      	addlt	r0, r0, r3
 8003136:	4770      	bx	lr

08003138 <_init>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr

08003144 <_fini>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr
